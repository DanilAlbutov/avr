
spi datasheet recive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000060  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000053b  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004c1  00000000  00000000  0000067b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000559  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001098  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000f700  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000107bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00000302  00000000  00000000  000107cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	13 c0       	rjmp	.+38     	; 0x5c <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:


int main (void)
{
	
	DDRC = 0b00000001;
  38:	81 e0       	ldi	r24, 0x01	; 1
  3a:	84 bb       	out	0x14, r24	; 20
	DDRB= (1<<MISO);
  3c:	80 e1       	ldi	r24, 0x10	; 16
  3e:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE);
  40:	80 e4       	ldi	r24, 0x40	; 64
  42:	8d b9       	out	0x0d, r24	; 13
		char data = SPDR;
	
	 
	
		if (data == '1') {
			PORTC = 0b00000001;
  44:	91 e0       	ldi	r25, 0x01	; 1
	DDRC = 0b00000001;
	DDRB= (1<<MISO);
	SPCR = (1<<SPE);
	while(1)
	{
		while(!(SPSR & (1<<SPIF)));
  46:	77 9b       	sbis	0x0e, 7	; 14
  48:	fe cf       	rjmp	.-4      	; 0x46 <__SREG__+0x7>
		char data = SPDR;
  4a:	8f b1       	in	r24, 0x0f	; 15
	
	 
	
		if (data == '1') {
  4c:	81 33       	cpi	r24, 0x31	; 49
  4e:	11 f4       	brne	.+4      	; 0x54 <__SREG__+0x15>
			PORTC = 0b00000001;
  50:	95 bb       	out	0x15, r25	; 21
  52:	f9 cf       	rjmp	.-14     	; 0x46 <__SREG__+0x7>
		}
		if (data == '0') {
  54:	80 33       	cpi	r24, 0x30	; 48
  56:	b9 f7       	brne	.-18     	; 0x46 <__SREG__+0x7>
			PORTC = 0b00000000;
  58:	15 ba       	out	0x15, r1	; 21
  5a:	f5 cf       	rjmp	.-22     	; 0x46 <__SREG__+0x7>

0000005c <_exit>:
  5c:	f8 94       	cli

0000005e <__stop_program>:
  5e:	ff cf       	rjmp	.-2      	; 0x5e <__stop_program>
